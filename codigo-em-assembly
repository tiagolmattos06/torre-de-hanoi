; Torre de Hanói recursiva - versão corrigida (NASM x86-64)
; Compilar: nasm -f elf64 hanoi.asm -o hanoi.o
; Ligar:    ld hanoi.o -o hanoi
; Rodar:    ./hanoi

section .data
    prompt      db "Digite o numero de discos: ", 0
    msg_move    db "Mova disco ", 0
    msg_from    db " da ", 0
    msg_to      db " para ", 0
    newline     db 10, 0

    torre1      db "Torre 1", 0
    torre2      db "Torre 2", 0
    torre3      db "Torre 3", 0
    zero_char   db "0", 0

section .bss
    input_buf   resb 8
    buffer      resb 32

section .text
    global _start

;-------------------------------------------
; print_string (RSI = endereço da string)
;-------------------------------------------
print_string:
    push rax
    push rdi
    push rdx
    xor rax, rax
.count:
    cmp byte [rsi + rax], 0
    je .done_count
    inc rax
    jmp .count
.done_count:
    mov rdx, rax
    mov rax, 1
    mov rdi, 1
    syscall
    pop rdx
    pop rdi
    pop rax
    ret

;-------------------------------------------
; read_input → RAX = número digitado
;-------------------------------------------
read_input:
    mov rax, 0
    mov rdi, 0
    mov rsi, input_buf
    mov rdx, 8
    syscall

    mov rsi, input_buf
    xor rax, rax
.next:
    mov bl, [rsi]
    cmp bl, 10
    je .done
    cmp bl, 0
    je .done
    sub bl, '0'
    imul rax, rax, 10
    add rax, rbx
    inc rsi
    jmp .next
.done:
    ret

;-------------------------------------------
; print_num (RDI = número)
;-------------------------------------------
print_num:
    push rbp
    mov rbp, rsp
    push rbx
    mov rax, rdi
    cmp rax, 0
    jne .conv
    mov rsi, zero_char
    call print_string
    jmp .exit
.conv:
    lea rbx, [buffer + 31]
    mov byte [rbx], 0
.loop:
    xor rdx, rdx
    mov rcx, 10
    div rcx
    add dl, '0'
    dec rbx
    mov [rbx], dl
    test rax, rax
    jnz .loop
    mov rsi, rbx
    call print_string
.exit:
    pop rbx
    mov rsp, rbp
    pop rbp
    ret

;-------------------------------------------
; torre(n, origem, auxiliar, destino)
;-------------------------------------------
torre:
    push rbp
    mov rbp, rsp
    sub rsp, 32
    push rbx
    push r12
    push r13
    push r14
    push r15

    mov [rbp-8], rdi
    mov [rbp-16], rsi
    mov [rbp-24], rdx
    mov [rbp-32], rcx

    mov rax, [rbp-8]
    cmp rax, 1
    jle .move_one

    ; torre(n-1, origem, destino, auxiliar)
    mov rdi, [rbp-8]
    dec rdi
    mov rsi, [rbp-16]
    mov rdx, [rbp-32]
    mov rcx, [rbp-24]
    call torre

.move_one:
    mov rsi, msg_move
    call print_string
    mov rdi, [rbp-8]
    call print_num
    mov rsi, msg_from
    call print_string
    mov rsi, [rbp-16]
    call print_string
    mov rsi, msg_to
    call print_string
    mov rsi, [rbp-32]
    call print_string
    mov rsi, newline
    call print_string

    mov rax, [rbp-8]
    cmp rax, 1
    jle .done

    ; torre(n-1, auxiliar, origem, destino)
    mov rdi, [rbp-8]
    dec rdi
    mov rsi, [rbp-24]
    mov rdx, [rbp-16]
    mov rcx, [rbp-32]
    call torre

.done:
    pop r15
    pop r14
    pop r13
    pop r12
    pop rbx
    mov rsp, rbp
    pop rbp
    ret

;-------------------------------------------
; _start
;-------------------------------------------
_start:
    mov rsi, prompt
    call print_string
    call read_input
    mov rdi, rax
    mov rsi, torre1
    mov rdx, torre2
    mov rcx, torre3
    call torre
    mov rax, 60
    xor rdi, rdi
    syscall
